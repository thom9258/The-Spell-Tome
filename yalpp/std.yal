(progn

; ======================================================================
; Info
; ======================================================================

(global! *creator*     "Thomas Alexgaard")
(global! *creator-git* "https://github.com/thom9258/")
(global! *host*        "C++")

; ======================================================================
; Predicates
; ======================================================================

(fn! notnil?  (v) (not (nil? v)))
(fn! real?    (v) (= (typeof v) 'real))
(fn! decimal? (v) (= (typeof v) 'decimal))
(fn! value?   (v) (or (= (typeof v) 'real) (= (typeof v) 'decimal)))
(fn! symbol?  (v) (= (typeof v) 'symbol))
(fn! string?  (v) (= (typeof v) 'string))
(fn! cons?    (v) (= (typeof v) 'cons))
(fn! list?    (v) (or (nil? v) (= (typeof v) 'cons)))
(fn! atom?    (v) (or (nil? v) (not (cons? v))))
(fn! buildin? (v) (= (typeof v) 'buildin))
(fn! fn?      (v) (or (buildin? v) (= (typeof v) 'lambda)))
(fn! macro?   (v) (= (typeof v) 'macro))
(fn! var?     (v) (and (symbol? v) (notnil? (variable-definition v))))

; ======================================================================
; Logical operators
; ======================================================================

(fn! not (x)
 (if (nil? x) T NIL))

(fn! _OR2 (a b)
  (if (notnil? a) (return T))
  (if (notnil? b) (return T))
  NIL)

(fn! _AND2 (a b)
  (if (notnil? a) (if (notnil? b) (return T)))
  NIL)

(fn! or (&lst) (reduce _OR2 NIL lst))
(fn! and (&lst) (reduce _AND2 T lst))

; ======================================================================
; Operating System Interaction
; ======================================================================

(fn! load-file (f) (eval (read (slurp-file f))))

(fn! time-hours (time) (first time))
(fn! time-minutes (time) (second time))
(fn! time-seconds (time) (third time))

; ======================================================================
; Printing
; ======================================================================

(fn! print (&outs)
  (write (apply 'concat outs)))

(fn! println (&outs)
  (prog1 (write (apply 'concat outs)) (newline)))
  
; ======================================================================
; Math
; ======================================================================

(global! PI         3.141592)
(global! E          2.71828)
(global! E-constant 0.57721)

(fn! + (&lst) (reduce _PLUS2 0 lst))
(fn! * (&lst) (reduce _MULTIPLY2 1 lst))

(fn! - (&lst) 
  (if (nil? lst) 
    0
    (if (= (len lst) 1)
      (* -1 (first lst))
      (reduce _MINUS2 (first lst) (rest lst)))))

(fn! / (&lst)
  (if (nil? lst)
    1
    (reduce _DIVIDE2 (first lst) (rest lst))))

(fn! min (a b) (if (< a b) a b))
(fn! max (a b) (if (< a b) b a))
(fn! clamp (val low high) (max low (min val high)))

(fn! abs (v) (if (< v 0) (* -1 v) v))
; note: added as a buildin for now..
; (fn! % (n a) (if (> n a) (% (- n a) a) a))
(fn! zero? (v) (or (= v 0) (= v 0.0)))
(fn! even? (v) (= (% v 2) 0))
(fn! odd? (v) (= (% v 2) 1))
(fn! square (v) (* v v))
(fn! cube (v) (* v v v))

(fn! sum-of-squares (&values)
  "Calculate the sum of squares of all values provided, eg:"
  "v1^2 + v2^2 + ... + vN^2"
  (apply + (transform square values)))

(fn! factorial (v)
  (if (= v 0) 1 (* v (factorial (- v 1)))))

(fn! bin-coeff (n k)
  (/ (factorial n) (factorial (- n k)) (factorial k)))

(fn! fib (n)
  (if (< n 2)
    n
    (+ (fib (- n 1)) (fib (- n 2)))))
    
; ======================================================================
; Evaluation
; ======================================================================

(fn! prog1 (&body)
  "evaluate body and return first result"
  (if (nil? body) NIL (first body)))

(fn! prog2 (&body)
  "evaluate body and return second result"
  (if (nil? body) NIL (second body)))

(fn! prog3 (&body)
  "evaluate body and return third result"
  (if (nil? body) NIL (third body)))

(fn! apply (fn list)
  "apply function to list"
  (eval (put fn list)))

(fn! list (&vars) vars)

; ======================================================================
; List utilities
; ======================================================================

(fn! put (v l)
 "put value onto front of list"
 (cons v l))

(fn! len (l)
 "calculate length of list"
 (if (nil? l)
   0
   (+ 1 (len (rest l)))))

(fn! contains (value list)
  "check if value is in list"
  (if (nil? list)
    NIL
    (if (= (car list) value)
      T
      (contains value (cdr list)))))

(fn! recurse (n)
  "create recursion calls n times (used to test tail-call-optimization)"
  (if (> n 0) (recurse (- n 1)) 'did-we-blow-up?))

(fn! before-n (n lst)
  "create a list containing the first n values of a given list"
  (if (= n 0)
    NIL
    (put (first lst) (before-n (- n 1) (rest lst)))))

(fn! after-n (n lst)
  "create a list containing the last n values of a given list"
  (if (= n 0)
    lst
    (after-n (- n 1) (rest lst))))

(fn! split (n lst)
  "create 2 lists split at n"
  [(before-n n lst) (after-n n lst)])

(fn! transform (fn lst)
  "apply fn to all value in lst and collect results"
  (if (nil? lst)
    NIL
    (put ((variable-value 'fn) (first lst)) (transform fn (rest lst)))))

(fn! map (fn &lists)
  "apply fn to sequencially mapped values in lists and collect results"
  (throw "map does not work yet")
  (if (nil? (car lists))
    NIL
    (cons (apply fn (transform 'car lists))
          (apply 'map (cons fn
                           (transform 'cdr lists))))))

(fn! reduce (fn init list)
 "fold a list using fn and init value"
  (if list
  (reduce fn
    (fn init (first list))
    (rest list))
  init))

(fn! reduce-r (fn init list)
  "reverse fold a list using fn and init value"
  (if (nil? list)
    (fn (first list)
        (reduce-r fn init (rest list)))
  init))

(fn! join (a b)
  (if (nil? a)
    b
    (cons (first a) (join (rest a) b))))

(fn! reverse (list)
  "reverse a list"
  (reduce (lambda (a x) (cons x a)) nil list))


; ======================================================================
; List accessors
; ======================================================================

(fn! head  (l) (car l))
(fn! tail  (l) (cdr l))
(fn! first (l) (car l))
(fn! rest  (l) (cdr l))

(fn! second  (l) (car (cdr l)))
(fn! third   (l) (car (cdr (cdr l))))
(fn! fourth  (l) (car (cdr (cdr (cdr l)))))
(fn! fifth   (l) (car (cdr (cdr (cdr (cdr l))))))
(fn! sixth   (l) (car (cdr (cdr (cdr (cdr (cdr l)))))))
(fn! seventh (l) (car (cdr (cdr (cdr (cdr (cdr (cdr l))))))))
(fn! eighth  (l) (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))
(fn! ninth   (l) (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l))))))))))
(fn! tenth   (l) (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr l)))))))))))

(fn! cddr (l) (cdr (cdr l)))
(fn! cdar (l) (cdr (car l)))
(fn! cadr (l) (car (cdr l)))
(fn! caar (l) (car (car l)))

(fn! caddr (l) (car (cdr (cdr l))))
(fn! cadar (l) (car (cdr (car l))))
(fn! caadr (l) (car (car (cdr l))))
(fn! caaar (l) (car (car (car l))))
(fn! cdddr (l) (cdr (cdr (cdr l))))
(fn! cddar (l) (cdr (cdr (car l))))
(fn! cdadr (l) (cdr (car (cdr l))))
(fn! cdaar (l) (cdr (car (car l))))

(fn! nthcdr (n list)
 "get list subset starting from n"
 (if (> 1 n)
   list
   (nthcdr (- n 1) (rest list))))

(fn! nth (n list)
 "get nth value of list"
 (head (nthcdr n list)))
 
(fn! get (idxs lst)
  "get value of list using arbitrary idxs list"
  (if (< (len idxs) 2)
    (nth (first idxs) lst)
    (get (rest idxs) (nth (first idxs) lst))))

(fn! lastcdr (list)
 "get last car of list"
 (nthcdr (- (len list) 1) list))

(fn! last (list)
 "get last value of list"
 (first  (lastcdr list)))
 
(fn! assoc (key list)
  "check if key is in list, then return (key value)"
  (if (nil? list)
    NIL
    (if (= (caar list) key)
      (car list)
      (assoc key (cdr list)))))

; ======================================================================
; Variables
; ======================================================================

(macro! setq! (v x)
  ['set! 'v x])

(fn! setnth! (n val list)
  "set the nth value of a list"
  (local! target (nthcdr n list))
  (if (nil? target)
    (throw "invalid index to set, got" n)
    (setcar! target val)))

(fn! variable-value (var)
  "get value associated with variable"
  (first (variable-definition var)))

(fn! set! (var val)
  "change variable to become value on evaluation"
  (if (not (var? var))
    (throw "set! expected symbol variable, not" var))
  (setnth! 0 val (variable-definition var)))

; ======================================================================
; Strings
; ======================================================================

(fn! concat (&list) (reduce _CONCAT2 "" list))

; ======================================================================
; Macro Helpers
; ======================================================================

(fn! unquote (x)
  (throw "unquotes need to be wrapped inside quasiquotes"))

(fn! unquote-splicing (x)
  (unquote x))

(macro! quasiquote (x)
  (if (cons? x)
    (if (= (car x) 'unquote)
      (cadr x)
      (if (= (caar x) 'unquote-splicing)
        ['join (cadr (car x)) ['quasiquote (cdr x)]]
        ['cons ['quasiquote (car x)]
               ['quasiquote (cdr x)]]))
    ['quote x]))

; ======================================================================
; Post evaluation of math constants
; ======================================================================

(global! PI2  (* PI 2))
(global! PI/2 (/ PI 2))
(global! PI/3 (/ PI 3))
(global! PI/4 (/ PI 4))

; ======================================================================
; End of std
; ======================================================================

"std was loaded")
