#+TITLE: Yet Another LISP
#+AUTHOR: Thomas Alexgaard
#+STARTUP: showeverything
#+OPTIONS: toc:2

** Table of Contents                                                    :toc:
  - [[#introduction][Introduction]]
  - [[#simple-example][Simple Example]]
  - [[#roadmap--wanted-features][Roadmap & wanted features]]

** Introduction

YAL is a programming languange in the LISP style aiming to provide a robust, fully-fledged programming interpreter.
The aim of the project is to create a highly scaleable implementation that is:

- Embeddable as a scripting languange for running C++ applications.
- Scaleable and modyfiable to the degree that you can mold the languange to fit the project's needs.
- Useable as a serializeable datastructure like JSON and XML.

YAL is a minimal implementation written in C++. This means that only the core features are implemented in the host languange, and the rest of the languange is hosted in itself. See "std.yal" for refrence.

** Simple Example

#+begin_src lisp
(fn! len (list)
  "count the length of list"
  (if (nil? list)
    0
    (+ 1 (len (rest list)))))

(fn! contains (value list)
  "check if a list contains a given value"
  (if (nil? list)
    NIL
    (if (= (first list) value)
      T
      (contains value (rest list)))))

(global! 'mylst '(d c b a)) 
;returns 'mylst', the name of the globally-created variable

(len mylst)
;returns '4'

(contains 'a mylst) 
;returns 'T', the truth variable

(contains 'e mylst) 
;returns 'NIL', the non-truth variable
#+end_src

Examples of how to utilize the syntax of YAL can be found in the standard library "std.yal" and in the "examples/" folder.


** Roadmap & wanted features

- [X] Comments support
- [.] Macro evaluation
  - [X] Macro expansion -> Evaluation
  - [X] Special tokens for quasi-quatation
  - [ ] Quasi-quote evaluation
- [ ] Garbage collection
- [ ] Tail call optimization
- [ ] Reading of files to not require a progn
- [ ] buildin or interpreted list iteration function (cl do)
- [X] buildin readline and atoi/atof equivilants for inputs

*** Nice to have

- [ ] Redefine variables to contain variable-value and variable-function
- [X] Use a hash map for O(1) access of variables instead of iteration using assoc
- [X] List manipulation such as split, and map transforms for lists
- [.] Keywords and stricter error checking for function binds and checking of correct input len
- [ ] let and flet scopes
- [ ] format and print functions
